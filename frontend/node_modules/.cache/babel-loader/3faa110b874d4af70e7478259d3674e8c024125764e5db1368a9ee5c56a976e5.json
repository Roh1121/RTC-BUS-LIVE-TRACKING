{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.url = void 0;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n    this.url = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n  }\n  connect(token) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.socket = io(this.url, {\n          auth: {\n            token: token || localStorage.getItem('token')\n          },\n          transports: ['websocket', 'polling']\n        });\n        this.socket.on('connect', () => {\n          console.log('Connected to server');\n          this.reconnectAttempts = 0;\n          resolve();\n        });\n        this.socket.on('disconnect', reason => {\n          console.log('Disconnected from server:', reason);\n          if (reason === 'io server disconnect') {\n            // Server initiated disconnect, try to reconnect\n            this.handleReconnect();\n          }\n        });\n        this.socket.on('connect_error', error => {\n          console.error('Connection error:', error);\n          this.handleReconnect();\n          reject(error);\n        });\n        this.socket.on('subscription-confirmed', data => {\n          console.log('Subscription confirmed:', data);\n        });\n\n        // Set up ping/pong for connection health\n        this.socket.on('pong', data => {\n          console.log('Pong received:', data);\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n      setTimeout(() => {\n        console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect();\n      }, delay);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n\n  // Subscription methods\n  subscribeToRoute(routeId) {\n    if (this.socket) {\n      this.socket.emit('subscribe-route', routeId);\n    }\n  }\n  unsubscribeFromRoute(routeId) {\n    if (this.socket) {\n      this.socket.emit('unsubscribe-route', routeId);\n    }\n  }\n  subscribeToBus(busId) {\n    if (this.socket) {\n      this.socket.emit('subscribe-bus', busId);\n    }\n  }\n  unsubscribeFromBus(busId) {\n    if (this.socket) {\n      this.socket.emit('unsubscribe-bus', busId);\n    }\n  }\n  subscribeToArea(latitude, longitude, radius) {\n    if (this.socket) {\n      this.socket.emit('subscribe-area', {\n        latitude,\n        longitude,\n        radius\n      });\n    }\n  }\n\n  // Event listeners\n  onBusLocationUpdate(callback) {\n    if (this.socket) {\n      this.socket.on('bus-location-updated', callback);\n    }\n  }\n  onBusOccupancyUpdate(callback) {\n    if (this.socket) {\n      this.socket.on('bus-occupancy-updated', callback);\n    }\n  }\n  onBusStatusChange(callback) {\n    if (this.socket) {\n      this.socket.on('bus-status-changed', callback);\n    }\n  }\n  onServiceAlert(callback) {\n    if (this.socket) {\n      this.socket.on('service-alert', callback);\n    }\n  }\n\n  // Remove event listeners\n  offBusLocationUpdate() {\n    if (this.socket) {\n      this.socket.off('bus-location-updated');\n    }\n  }\n  offBusOccupancyUpdate() {\n    if (this.socket) {\n      this.socket.off('bus-occupancy-updated');\n    }\n  }\n  offBusStatusChange() {\n    if (this.socket) {\n      this.socket.off('bus-status-changed');\n    }\n  }\n  offServiceAlert() {\n    if (this.socket) {\n      this.socket.off('service-alert');\n    }\n  }\n\n  // Driver/operator methods\n  shareLocation(data) {\n    if (this.socket) {\n      this.socket.emit('share-location', data);\n    }\n  }\n  updateOccupancy(data) {\n    if (this.socket) {\n      this.socket.emit('update-occupancy', data);\n    }\n  }\n  sendAlert(data) {\n    if (this.socket) {\n      this.socket.emit('send-alert', data);\n    }\n  }\n\n  // Utility methods\n  ping() {\n    if (this.socket) {\n      this.socket.emit('ping');\n    }\n  }\n  isConnected() {\n    var _this$socket;\n    return ((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.connected) || false;\n  }\n  getSocket() {\n    return this.socket;\n  }\n}\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","url","reconnectAttempts","maxReconnectAttempts","reconnectDelay","process","env","REACT_APP_SOCKET_URL","connect","token","Promise","resolve","reject","auth","localStorage","getItem","transports","on","console","log","reason","handleReconnect","error","data","disconnect","delay","Math","pow","setTimeout","subscribeToRoute","routeId","emit","unsubscribeFromRoute","subscribeToBus","busId","unsubscribeFromBus","subscribeToArea","latitude","longitude","radius","onBusLocationUpdate","callback","onBusOccupancyUpdate","onBusStatusChange","onServiceAlert","offBusLocationUpdate","off","offBusOccupancyUpdate","offBusStatusChange","offServiceAlert","shareLocation","updateOccupancy","sendAlert","ping","isConnected","_this$socket","connected","getSocket","socketService"],"sources":["C:/Users/Rohini/CascadeProjects/rtc-bus-tracking/frontend/src/services/socketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\nimport { BusLocationUpdate, BusOccupancyUpdate, BusStatusChange, ServiceAlert } from '../types';\n\nclass SocketService {\n  private socket: Socket | null = null;\n  private url: string;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n\n  constructor() {\n    this.url = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n  }\n\n  connect(token?: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.socket = io(this.url, {\n          auth: {\n            token: token || localStorage.getItem('token'),\n          },\n          transports: ['websocket', 'polling'],\n        });\n\n        this.socket.on('connect', () => {\n          console.log('Connected to server');\n          this.reconnectAttempts = 0;\n          resolve();\n        });\n\n        this.socket.on('disconnect', (reason) => {\n          console.log('Disconnected from server:', reason);\n          if (reason === 'io server disconnect') {\n            // Server initiated disconnect, try to reconnect\n            this.handleReconnect();\n          }\n        });\n\n        this.socket.on('connect_error', (error) => {\n          console.error('Connection error:', error);\n          this.handleReconnect();\n          reject(error);\n        });\n\n        this.socket.on('subscription-confirmed', (data) => {\n          console.log('Subscription confirmed:', data);\n        });\n\n        // Set up ping/pong for connection health\n        this.socket.on('pong', (data) => {\n          console.log('Pong received:', data);\n        });\n\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  disconnect(): void {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  private handleReconnect(): void {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n      \n      setTimeout(() => {\n        console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect();\n      }, delay);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n\n  // Subscription methods\n  subscribeToRoute(routeId: string): void {\n    if (this.socket) {\n      this.socket.emit('subscribe-route', routeId);\n    }\n  }\n\n  unsubscribeFromRoute(routeId: string): void {\n    if (this.socket) {\n      this.socket.emit('unsubscribe-route', routeId);\n    }\n  }\n\n  subscribeToBus(busId: string): void {\n    if (this.socket) {\n      this.socket.emit('subscribe-bus', busId);\n    }\n  }\n\n  unsubscribeFromBus(busId: string): void {\n    if (this.socket) {\n      this.socket.emit('unsubscribe-bus', busId);\n    }\n  }\n\n  subscribeToArea(latitude: number, longitude: number, radius?: number): void {\n    if (this.socket) {\n      this.socket.emit('subscribe-area', { latitude, longitude, radius });\n    }\n  }\n\n  // Event listeners\n  onBusLocationUpdate(callback: (data: BusLocationUpdate) => void): void {\n    if (this.socket) {\n      this.socket.on('bus-location-updated', callback);\n    }\n  }\n\n  onBusOccupancyUpdate(callback: (data: BusOccupancyUpdate) => void): void {\n    if (this.socket) {\n      this.socket.on('bus-occupancy-updated', callback);\n    }\n  }\n\n  onBusStatusChange(callback: (data: BusStatusChange) => void): void {\n    if (this.socket) {\n      this.socket.on('bus-status-changed', callback);\n    }\n  }\n\n  onServiceAlert(callback: (data: ServiceAlert) => void): void {\n    if (this.socket) {\n      this.socket.on('service-alert', callback);\n    }\n  }\n\n  // Remove event listeners\n  offBusLocationUpdate(): void {\n    if (this.socket) {\n      this.socket.off('bus-location-updated');\n    }\n  }\n\n  offBusOccupancyUpdate(): void {\n    if (this.socket) {\n      this.socket.off('bus-occupancy-updated');\n    }\n  }\n\n  offBusStatusChange(): void {\n    if (this.socket) {\n      this.socket.off('bus-status-changed');\n    }\n  }\n\n  offServiceAlert(): void {\n    if (this.socket) {\n      this.socket.off('service-alert');\n    }\n  }\n\n  // Driver/operator methods\n  shareLocation(data: {\n    busId: string;\n    latitude: number;\n    longitude: number;\n    speed?: number;\n    direction?: number;\n  }): void {\n    if (this.socket) {\n      this.socket.emit('share-location', data);\n    }\n  }\n\n  updateOccupancy(data: {\n    busId: string;\n    occupiedSeats: number;\n    totalSeats: number;\n  }): void {\n    if (this.socket) {\n      this.socket.emit('update-occupancy', data);\n    }\n  }\n\n  sendAlert(data: {\n    type: string;\n    message: string;\n    routeId?: string;\n    busId?: string;\n    severity?: 'info' | 'warning' | 'error' | 'success';\n  }): void {\n    if (this.socket) {\n      this.socket.emit('send-alert', data);\n    }\n  }\n\n  // Utility methods\n  ping(): void {\n    if (this.socket) {\n      this.socket.emit('ping');\n    }\n  }\n\n  isConnected(): boolean {\n    return this.socket?.connected || false;\n  }\n\n  getSocket(): Socket | null {\n    return this.socket;\n  }\n}\n\nexport const socketService = new SocketService();\nexport default socketService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}