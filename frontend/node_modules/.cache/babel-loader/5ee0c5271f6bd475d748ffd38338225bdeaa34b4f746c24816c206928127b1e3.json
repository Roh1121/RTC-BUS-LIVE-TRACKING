{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useCallback, useRef } from 'react';\nimport { socketService } from '../services/socketService';\nexport const useSocket = (options = {}) => {\n  _s();\n  const {\n    onBusLocationUpdate,\n    onBusOccupancyUpdate,\n    onBusStatusChange,\n    onServiceAlert,\n    autoConnect = true\n  } = options;\n  const isConnectedRef = useRef(false);\n  const connect = useCallback(async token => {\n    try {\n      if (!isConnectedRef.current) {\n        await socketService.connect(token);\n        isConnectedRef.current = true;\n      }\n    } catch (error) {\n      console.error('Failed to connect to socket:', error);\n      isConnectedRef.current = false;\n    }\n  }, []);\n  const disconnect = useCallback(() => {\n    socketService.disconnect();\n    isConnectedRef.current = false;\n  }, []);\n  const subscribeToRoute = useCallback(routeId => {\n    socketService.subscribeToRoute(routeId);\n  }, []);\n  const unsubscribeFromRoute = useCallback(routeId => {\n    socketService.unsubscribeFromRoute(routeId);\n  }, []);\n  const subscribeToBus = useCallback(busId => {\n    socketService.subscribeToBus(busId);\n  }, []);\n  const unsubscribeFromBus = useCallback(busId => {\n    socketService.unsubscribeFromBus(busId);\n  }, []);\n  const subscribeToArea = useCallback((latitude, longitude, radius) => {\n    socketService.subscribeToArea(latitude, longitude, radius);\n  }, []);\n  const shareLocation = useCallback(data => {\n    socketService.shareLocation(data);\n  }, []);\n  const updateOccupancy = useCallback(data => {\n    socketService.updateOccupancy(data);\n  }, []);\n  const sendAlert = useCallback(data => {\n    socketService.sendAlert(data);\n  }, []);\n  useEffect(() => {\n    if (autoConnect) {\n      connect();\n    }\n    return () => {\n      if (autoConnect) {\n        disconnect();\n      }\n    };\n  }, [autoConnect, connect, disconnect]);\n  useEffect(() => {\n    if (onBusLocationUpdate) {\n      socketService.onBusLocationUpdate(onBusLocationUpdate);\n    }\n    if (onBusOccupancyUpdate) {\n      socketService.onBusOccupancyUpdate(onBusOccupancyUpdate);\n    }\n    if (onBusStatusChange) {\n      socketService.onBusStatusChange(onBusStatusChange);\n    }\n    if (onServiceAlert) {\n      socketService.onServiceAlert(onServiceAlert);\n    }\n    return () => {\n      socketService.offBusLocationUpdate();\n      socketService.offBusOccupancyUpdate();\n      socketService.offBusStatusChange();\n      socketService.offServiceAlert();\n    };\n  }, [onBusLocationUpdate, onBusOccupancyUpdate, onBusStatusChange, onServiceAlert]);\n  return {\n    connect,\n    disconnect,\n    subscribeToRoute,\n    unsubscribeFromRoute,\n    subscribeToBus,\n    unsubscribeFromBus,\n    subscribeToArea,\n    shareLocation,\n    updateOccupancy,\n    sendAlert,\n    isConnected: () => socketService.isConnected()\n  };\n};\n_s(useSocket, \"ETJUVpjdqZDrZVOUIc2Tcku80Ks=\");","map":{"version":3,"names":["useEffect","useCallback","useRef","socketService","useSocket","options","_s","onBusLocationUpdate","onBusOccupancyUpdate","onBusStatusChange","onServiceAlert","autoConnect","isConnectedRef","connect","token","current","error","console","disconnect","subscribeToRoute","routeId","unsubscribeFromRoute","subscribeToBus","busId","unsubscribeFromBus","subscribeToArea","latitude","longitude","radius","shareLocation","data","updateOccupancy","sendAlert","offBusLocationUpdate","offBusOccupancyUpdate","offBusStatusChange","offServiceAlert","isConnected"],"sources":["C:/Users/Rohini/CascadeProjects/rtc-bus-tracking/frontend/src/hooks/useSocket.ts"],"sourcesContent":["import { useEffect, useCallback, useRef } from 'react';\nimport { socketService } from '../services/socketService';\nimport { BusLocationUpdate, BusOccupancyUpdate, BusStatusChange, ServiceAlert } from '../types';\n\ninterface UseSocketOptions {\n  onBusLocationUpdate?: (data: BusLocationUpdate) => void;\n  onBusOccupancyUpdate?: (data: BusOccupancyUpdate) => void;\n  onBusStatusChange?: (data: BusStatusChange) => void;\n  onServiceAlert?: (data: ServiceAlert) => void;\n  autoConnect?: boolean;\n}\n\nexport const useSocket = (options: UseSocketOptions = {}) => {\n  const {\n    onBusLocationUpdate,\n    onBusOccupancyUpdate,\n    onBusStatusChange,\n    onServiceAlert,\n    autoConnect = true,\n  } = options;\n\n  const isConnectedRef = useRef(false);\n\n  const connect = useCallback(async (token?: string) => {\n    try {\n      if (!isConnectedRef.current) {\n        await socketService.connect(token);\n        isConnectedRef.current = true;\n      }\n    } catch (error) {\n      console.error('Failed to connect to socket:', error);\n      isConnectedRef.current = false;\n    }\n  }, []);\n\n  const disconnect = useCallback(() => {\n    socketService.disconnect();\n    isConnectedRef.current = false;\n  }, []);\n\n  const subscribeToRoute = useCallback((routeId: string) => {\n    socketService.subscribeToRoute(routeId);\n  }, []);\n\n  const unsubscribeFromRoute = useCallback((routeId: string) => {\n    socketService.unsubscribeFromRoute(routeId);\n  }, []);\n\n  const subscribeToBus = useCallback((busId: string) => {\n    socketService.subscribeToBus(busId);\n  }, []);\n\n  const unsubscribeFromBus = useCallback((busId: string) => {\n    socketService.unsubscribeFromBus(busId);\n  }, []);\n\n  const subscribeToArea = useCallback((latitude: number, longitude: number, radius?: number) => {\n    socketService.subscribeToArea(latitude, longitude, radius);\n  }, []);\n\n  const shareLocation = useCallback((data: {\n    busId: string;\n    latitude: number;\n    longitude: number;\n    speed?: number;\n    direction?: number;\n  }) => {\n    socketService.shareLocation(data);\n  }, []);\n\n  const updateOccupancy = useCallback((data: {\n    busId: string;\n    occupiedSeats: number;\n    totalSeats: number;\n  }) => {\n    socketService.updateOccupancy(data);\n  }, []);\n\n  const sendAlert = useCallback((data: {\n    type: string;\n    message: string;\n    routeId?: string;\n    busId?: string;\n    severity?: 'info' | 'warning' | 'error' | 'success';\n  }) => {\n    socketService.sendAlert(data);\n  }, []);\n\n  useEffect(() => {\n    if (autoConnect) {\n      connect();\n    }\n\n    return () => {\n      if (autoConnect) {\n        disconnect();\n      }\n    };\n  }, [autoConnect, connect, disconnect]);\n\n  useEffect(() => {\n    if (onBusLocationUpdate) {\n      socketService.onBusLocationUpdate(onBusLocationUpdate);\n    }\n\n    if (onBusOccupancyUpdate) {\n      socketService.onBusOccupancyUpdate(onBusOccupancyUpdate);\n    }\n\n    if (onBusStatusChange) {\n      socketService.onBusStatusChange(onBusStatusChange);\n    }\n\n    if (onServiceAlert) {\n      socketService.onServiceAlert(onServiceAlert);\n    }\n\n    return () => {\n      socketService.offBusLocationUpdate();\n      socketService.offBusOccupancyUpdate();\n      socketService.offBusStatusChange();\n      socketService.offServiceAlert();\n    };\n  }, [onBusLocationUpdate, onBusOccupancyUpdate, onBusStatusChange, onServiceAlert]);\n\n  return {\n    connect,\n    disconnect,\n    subscribeToRoute,\n    unsubscribeFromRoute,\n    subscribeToBus,\n    unsubscribeFromBus,\n    subscribeToArea,\n    shareLocation,\n    updateOccupancy,\n    sendAlert,\n    isConnected: () => socketService.isConnected(),\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}