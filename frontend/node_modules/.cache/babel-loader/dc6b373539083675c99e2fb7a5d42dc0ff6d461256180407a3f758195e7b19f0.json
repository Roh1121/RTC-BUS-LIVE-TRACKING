{"ast":null,"code":"import axios from 'axios';\nclass ApiService {\n  constructor() {\n    this.api = void 0;\n    this.baseURL = void 0;\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n    this.api = axios.create({\n      baseURL: this.baseURL,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // Response interceptor for error handling\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Auth endpoints\n  async login(email, password) {\n    const response = await this.api.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data;\n  }\n  async register(userData) {\n    const response = await this.api.post('/auth/register', userData);\n    return response.data;\n  }\n  async getMe() {\n    const response = await this.api.get('/auth/me');\n    return response.data;\n  }\n  async updateProfile(userData) {\n    const response = await this.api.put('/auth/me', userData);\n    return response.data;\n  }\n  async changePassword(currentPassword, newPassword) {\n    const response = await this.api.put('/auth/change-password', {\n      currentPassword,\n      newPassword\n    });\n    return response.data;\n  }\n\n  // Bus endpoints\n  async getBuses(params) {\n    const response = await this.api.get('/buses', {\n      params\n    });\n    return response.data;\n  }\n  async getBus(id) {\n    const response = await this.api.get(`/buses/${id}`);\n    return response.data;\n  }\n  async getBusesByRoute(routeId) {\n    const response = await this.api.get(`/buses/route/${routeId}`);\n    return response.data;\n  }\n  async getNearbyBuses(latitude, longitude, radius) {\n    const response = await this.api.get('/buses/nearby', {\n      params: {\n        latitude,\n        longitude,\n        radius\n      }\n    });\n    return response.data;\n  }\n  async updateBusLocation(data) {\n    const response = await this.api.post('/buses/update-location', data);\n    return response.data;\n  }\n  async createBus(busData) {\n    const response = await this.api.post('/buses', busData);\n    return response.data;\n  }\n  async updateBus(id, busData) {\n    const response = await this.api.put(`/buses/${id}`, busData);\n    return response.data;\n  }\n  async updateBusStatus(id, status) {\n    const response = await this.api.patch(`/buses/${id}/status`, {\n      status\n    });\n    return response.data;\n  }\n  async deleteBus(id) {\n    const response = await this.api.delete(`/buses/${id}`);\n    return response.data;\n  }\n\n  // Route endpoints\n  async getRoutes(params) {\n    const response = await this.api.get('/routes', {\n      params\n    });\n    return response.data;\n  }\n  async getRoute(id) {\n    const response = await this.api.get(`/routes/${id}`);\n    return response.data;\n  }\n  async getRoutesByArea(latitude, longitude, radius) {\n    const response = await this.api.get('/routes/nearby', {\n      params: {\n        latitude,\n        longitude,\n        radius\n      }\n    });\n    return response.data;\n  }\n  async getRouteStops(id) {\n    const response = await this.api.get(`/routes/${id}/stops`);\n    return response.data;\n  }\n  async getRouteArrivals(id) {\n    const response = await this.api.get(`/routes/${id}/arrivals`);\n    return response.data;\n  }\n  async searchRoutes(query, limit) {\n    const response = await this.api.get('/routes/search', {\n      params: {\n        q: query,\n        limit\n      }\n    });\n    return response.data;\n  }\n  async createRoute(routeData) {\n    const response = await this.api.post('/routes', routeData);\n    return response.data;\n  }\n  async updateRoute(id, routeData) {\n    const response = await this.api.put(`/routes/${id}`, routeData);\n    return response.data;\n  }\n  async deleteRoute(id) {\n    const response = await this.api.delete(`/routes/${id}`);\n    return response.data;\n  }\n\n  // Utility methods\n  setAuthToken(token) {\n    localStorage.setItem('token', token);\n  }\n  removeAuthToken() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n  getAuthToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getAuthToken();\n  }\n}\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["axios","ApiService","constructor","api","baseURL","process","env","REACT_APP_API_URL","create","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","login","email","password","post","data","register","userData","getMe","get","updateProfile","put","changePassword","currentPassword","newPassword","getBuses","params","getBus","id","getBusesByRoute","routeId","getNearbyBuses","latitude","longitude","radius","updateBusLocation","createBus","busData","updateBus","updateBusStatus","patch","deleteBus","delete","getRoutes","getRoute","getRoutesByArea","getRouteStops","getRouteArrivals","searchRoutes","query","limit","q","createRoute","routeData","updateRoute","deleteRoute","setAuthToken","setItem","removeAuthToken","getAuthToken","isAuthenticated","apiService"],"sources":["C:/Users/Rohini/CascadeProjects/rtc-bus-tracking/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport { ApiResponse, Bus, Route, User, SearchParams } from '../types';\n\nclass ApiService {\n  private api: AxiosInstance;\n  private baseURL: string;\n\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n    \n    this.api = axios.create({\n      baseURL: this.baseURL,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Response interceptor for error handling\n    this.api.interceptors.response.use(\n      (response: AxiosResponse) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Auth endpoints\n  async login(email: string, password: string): Promise<ApiResponse<{ user: User; token: string }>> {\n    const response = await this.api.post('/auth/login', { email, password });\n    return response.data;\n  }\n\n  async register(userData: {\n    name: string;\n    email: string;\n    password: string;\n    phoneNumber?: string;\n    role?: string;\n  }): Promise<ApiResponse<{ user: User; token: string }>> {\n    const response = await this.api.post('/auth/register', userData);\n    return response.data;\n  }\n\n  async getMe(): Promise<ApiResponse<{ user: User }>> {\n    const response = await this.api.get('/auth/me');\n    return response.data;\n  }\n\n  async updateProfile(userData: Partial<User>): Promise<ApiResponse<{ user: User }>> {\n    const response = await this.api.put('/auth/me', userData);\n    return response.data;\n  }\n\n  async changePassword(currentPassword: string, newPassword: string): Promise<ApiResponse<any>> {\n    const response = await this.api.put('/auth/change-password', {\n      currentPassword,\n      newPassword,\n    });\n    return response.data;\n  }\n\n  // Bus endpoints\n  async getBuses(params?: SearchParams): Promise<ApiResponse<Bus[]>> {\n    const response = await this.api.get('/buses', { params });\n    return response.data;\n  }\n\n  async getBus(id: string): Promise<ApiResponse<Bus>> {\n    const response = await this.api.get(`/buses/${id}`);\n    return response.data;\n  }\n\n  async getBusesByRoute(routeId: string): Promise<ApiResponse<Bus[]>> {\n    const response = await this.api.get(`/buses/route/${routeId}`);\n    return response.data;\n  }\n\n  async getNearbyBuses(\n    latitude: number,\n    longitude: number,\n    radius?: number\n  ): Promise<ApiResponse<Bus[]>> {\n    const response = await this.api.get('/buses/nearby', {\n      params: { latitude, longitude, radius },\n    });\n    return response.data;\n  }\n\n  async updateBusLocation(data: {\n    busId: string;\n    latitude: number;\n    longitude: number;\n    speed?: number;\n    direction?: number;\n    occupiedSeats?: number;\n  }): Promise<ApiResponse<any>> {\n    const response = await this.api.post('/buses/update-location', data);\n    return response.data;\n  }\n\n  async createBus(busData: Partial<Bus>): Promise<ApiResponse<Bus>> {\n    const response = await this.api.post('/buses', busData);\n    return response.data;\n  }\n\n  async updateBus(id: string, busData: Partial<Bus>): Promise<ApiResponse<Bus>> {\n    const response = await this.api.put(`/buses/${id}`, busData);\n    return response.data;\n  }\n\n  async updateBusStatus(id: string, status: string): Promise<ApiResponse<Bus>> {\n    const response = await this.api.patch(`/buses/${id}/status`, { status });\n    return response.data;\n  }\n\n  async deleteBus(id: string): Promise<ApiResponse<any>> {\n    const response = await this.api.delete(`/buses/${id}`);\n    return response.data;\n  }\n\n  // Route endpoints\n  async getRoutes(params?: SearchParams): Promise<ApiResponse<Route[]>> {\n    const response = await this.api.get('/routes', { params });\n    return response.data;\n  }\n\n  async getRoute(id: string): Promise<ApiResponse<{ route: Route; activeBuses: Bus[]; busCount: number }>> {\n    const response = await this.api.get(`/routes/${id}`);\n    return response.data;\n  }\n\n  async getRoutesByArea(\n    latitude: number,\n    longitude: number,\n    radius?: number\n  ): Promise<ApiResponse<Route[]>> {\n    const response = await this.api.get('/routes/nearby', {\n      params: { latitude, longitude, radius },\n    });\n    return response.data;\n  }\n\n  async getRouteStops(id: string): Promise<ApiResponse<{\n    routeId: string;\n    routeName: string;\n    routeNumber: string;\n    stops: any[];\n    totalStops: number;\n  }>> {\n    const response = await this.api.get(`/routes/${id}/stops`);\n    return response.data;\n  }\n\n  async getRouteArrivals(id: string): Promise<ApiResponse<any>> {\n    const response = await this.api.get(`/routes/${id}/arrivals`);\n    return response.data;\n  }\n\n  async searchRoutes(query: string, limit?: number): Promise<ApiResponse<Route[]>> {\n    const response = await this.api.get('/routes/search', {\n      params: { q: query, limit },\n    });\n    return response.data;\n  }\n\n  async createRoute(routeData: Partial<Route>): Promise<ApiResponse<Route>> {\n    const response = await this.api.post('/routes', routeData);\n    return response.data;\n  }\n\n  async updateRoute(id: string, routeData: Partial<Route>): Promise<ApiResponse<Route>> {\n    const response = await this.api.put(`/routes/${id}`, routeData);\n    return response.data;\n  }\n\n  async deleteRoute(id: string): Promise<ApiResponse<any>> {\n    const response = await this.api.delete(`/routes/${id}`);\n    return response.data;\n  }\n\n  // Utility methods\n  setAuthToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  removeAuthToken(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n\n  getAuthToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getAuthToken();\n  }\n}\n\nexport const apiService = new ApiService();\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}